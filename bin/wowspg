#!/usr/bin/env node

// process.title = 'wowspg';

var program = require('commander');
var fs = require('fs');
var path = require('path');
var spgbuilder = require('../src/spgbuilder.js');

program
    .version('0.0.1')
    .option('-b, --base [type]', 'base folder path')
    .option('-ld, --leftdelimiter [type]', 'template\'s left delimiter')
    .option('-rd, --rightdelimiter [type]', 'template\'s right delimiter')
    .option('-d, --dist [type]', 'template\'s dist folder')
    .option('-t, --target [type]', 'router config file to generate')
    .option('-c, --config [type]', 'the config file')
    .parse(process.argv);


var router = program.config || 'package.json';
var routerConfig = {};
var entrance = [];
if (!fs.existsSync(router)){
    throw new Error('Router\'s config file is not exist');
} else{
    var packageContent = fs.readFileSync(router, {
        encoding: 'utf8'
    });
    var config = JSON.parse(packageContent);
    var configDir = path.dirname(program.config);
    for (var ro in config.router){
        var routerPath = config.router[ro];
        if (path.extname(routerPath)){
            routerConfig[ro] = path.resolve(configDir, routerPath);
        } else{
            routerConfig[ro] = routerPath;
        }
    }

    for (var en in config.entrance){
        var ent = config.entrance[en];
        entrance.push({
            dist: path.resolve(configDir, ent.dist),
            tpl: path.resolve(configDir, ent.tpl)
        });
    }
}

spgbuilder.compile({
    base: program.base,
    ext: program.ext,
    ld: program.leftdelimiter,
    rd: program.rightdelimiter,
    dist: program.dist,
    target: program.target,
    router: routerConfig,
    entrance: entrance
});